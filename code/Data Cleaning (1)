# -*- coding: utf-8 -*-
"""
Created on Sun Nov 21 18:24:01 2021

@author: eresmini

"""

# THIS IS JUST THE DATA CLEANING

import pandas as pd
import numpy as np
import datetime
from sklearn.impute import SimpleImputer

#%%

df_concat = pd.concat(map(pd.read_csv, ['2014.csv', '2015.csv', '2016.csv',
                                        '2017.csv', '2018.csv']))

df = df_concat[pd.notnull(df_concat['OP_CARRIER'])]
df = df.drop(['Unnamed: 27'], axis=1)

#%%

# information on dataset
df_info = df.info()

#%%

# shows the amount and percentage of missing values - labelled 'missing_df1'
# we will have a few of these checks!

missing_df1 = df.isnull().sum(axis=0).reset_index()
missing_df1.columns = ['variable', 'missing values']
missing_df1['filling factor (%)']=(df.shape[0]-missing_df1['missing values'])/df.shape[0]*100
missing_df1.sort_values('filling factor (%)').reset_index(drop = True)

#%%

# SIMPLE IMPUTER - scikit learn https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html

# IMPUTATION PART 1
# For the delay type columns, replace NaN values with zeros
# will make a separate numpy array with new values - 'delay_filled'
X1 = df[['CARRIER_DELAY','WEATHER_DELAY','NAS_DELAY','SECURITY_DELAY','LATE_AIRCRAFT_DELAY',
         'DEP_DELAY','TAXI_OUT','WHEELS_OFF','WHEELS_ON','TAXI_IN','AIR_TIME','ARR_DELAY']]
imp_mean = SimpleImputer(missing_values=np.nan, strategy='constant', fill_value=None)
imp_mean.fit(X1)
delay_filled = imp_mean.transform(X1)

#%%

### REPLACE columns in main dataframe with the imputed arrays

values = delay_filled[:,0]
df['CARRIER_DELAY'] = values

values = delay_filled[:,1]
df['WEATHER_DELAY'] = values

values = delay_filled[:,2]
df['NAS_DELAY'] = values

values = delay_filled[:,3]
df['SECURITY_DELAY'] = values

values = delay_filled[:,4]
df['LATE_AIRCRAFT_DELAY'] = values

values = delay_filled[:,5]
df['DEP_DELAY'] = values

values = delay_filled[:,6]
df['TAXI_OUT'] = values

values = delay_filled[:,7]
df['WHEELS_OFF'] = values

values = delay_filled[:,8]
df['WHEELS_ON'] = values

values = delay_filled[:,9]
df['TAXI_IN'] = values

values = delay_filled[:,10]
df['AIR_TIME'] = values

values = delay_filled[:,11]
df['ARR_DELAY'] = values

#%%

# shows the amount and percentage of missing values after imputation and replacement
# labelled 'missing_df2'

missing_df2 = df.isnull().sum(axis=0).reset_index()
missing_df2.columns = ['variable', 'missing values']
missing_df2['filling factor (%)']=(df.shape[0]-missing_df2['missing values'])/df.shape[0]*100
missing_df2.sort_values('filling factor (%)').reset_index(drop = True)

#%%
### DROPPING ROWS

# Remove entries (rows) for flights with delays caused by NAS or security
### REMOVE WEATHER LATER
columns = ['NAS_DELAY', 'SECURITY_DELAY']
for i in columns:
    indexNames = df[df[i] != 0].index
    df.drop(indexNames, inplace=True)

# Remove entries for null departure time and arrival time
df = df.dropna(subset=['DEP_TIME', 'ARR_TIME', 'ACTUAL_ELAPSED_TIME'])

#%%
# shows the amount and percentage of missing values after imputation and replacement
# labelled 'missing_df3'

missing_df3 = df.isnull().sum(axis=0).reset_index()
missing_df3.columns = ['variable', 'missing values']
missing_df3['filling factor (%)']=(df.shape[0]-missing_df3['missing values'])/df.shape[0]*100
missing_df3.sort_values('filling factor (%)').reset_index(drop = True)

#%%

df['IATA'] = df['OP_CARRIER']

###### IATA CODE

# XE - ExpressJet Airlines
# YV - Mesa Airlines
# NW - Northwest Airlines
# OH - PSA Airlines
# OO - SkyWest Airlines
# UA - United Airlines
# US - US Airways
# WN - Southwest Airlines
# EV - Atlantic Southeast Airlines
# F9 - Frontier Airlines
# FL - AirTran Airways
# HA - Hawaiian Airlines
# MQ - Envoy Air
# 9E - Endeavor Air
# AA - American Airlines
# AS - Alaska Airlines
# B6 - JetBlue Airways
# CO - Continental Airlines
# DL - Delta Air Lines
# VX - Virgin America
# NK - Spirit Airlines
# G4 - Allegiant Air
# YX - Republic Airways

#####

df['OP_CARRIER'].replace({
    'XE' : 'ExpressJet Airlines',
    'YV' : 'Mesa Airlines',
    'NW' : 'Northwest Airlines',
    'OH' : 'PSA Airlines',
    'OO' : 'SkyWest Airlines',
    'UA' : 'United Airlines',
    'US' : 'US Airways',
    'WN' : 'Southwest Airlines',
    'EV' : 'Atlantic Southeast Airlines',
    'F9' : 'Frontier Airlines',
    'FL' : 'AirTran Airways',
    'HA' : 'Hawaiian Airlines',
    'MQ' : 'Envoy Air',
    '9E' : 'Endeavor Air',
    'AA' : 'American Airlines',
    'AS' : 'Alaska Airlines',
    'B6' : 'JetBlue Airways',
    'CO' : 'Continental Airlines',
    'DL' : 'Delta Air Lines',
    'VX' : 'Virgin America',
    'NK' : 'Spirit Airlines',
    'G4' : 'Allegiant Air',
    'YX' : 'Republic Airways'
}, inplace=True)

#%%

#### AIRLINES TO REMOVE:
# Atlantic Southeast Airlines - Merged into ExpressJet in 2011
# Airtran Airways - merged into Southwest in 2014
# Continental Airlines - merged into United Airlines in 2012
# ExpressJet - currently defunct (trying to come back)
# Northwest Airlines - acquired by Delta in 2008(?)
# US Airways - merged with American Airlines in 2013
# Virgin America - acquired by Alaska Airlines in 2018

flights_to_remove = ['Atlantic Southeast Airlines',
                     'AirTran Airways'
                     'Continental Airways',
                     'ExpressJet Airlines',
                     'Northwest Airlines'
                     'US Airways',
                     'Virgin America']

for carrier in flights_to_remove:
    indexNames = df[df['OP_CARRIER'] == carrier].index
    df = df.drop(indexNames, inplace=True)

airline_counts = df.OP_CARRIER.value_counts()

#%%

# gonna take away some of the least frequent-appearing airports
a_freq = df['ORIGIN'].value_counts() # shows the count of occurances of each origin airport
a_freq_list = a_freq.values.tolist()

airport = []
# for i in a_freq:
#     if i <= 50000:
#         airport.append(1)

for index, value in a_freq.items():
    if value <= 40000:
        airport.append(index)

df = df[df.ORIGIN.isin(airport) == False]

#%%
# split date (currently in YYYY-MM-DD format) into separate Year, Month, and Day columns
df[['Year','Month','Day']] = df.FL_DATE.str.split("-",expand=True,)

# find weekday of each flight
df['FL_DATE'] = pd.to_datetime(df['FL_DATE'])
df['WEEKDAY'] = df['FL_DATE'].dt.dayofweek

# WEEKDAY GLOSSARY:
# 0 = Monday
# 1 = Tuesday
# 2 = Wednesday
# 3 = Thursday
#  4 = Friday
# 5 = Saturday
# 6 = Sunday

#%%    

# Binary classification
# 0 - on time
# 1 - delayed
status1 = []
for value in df['ARR_DELAY']:
    if value < 15: # anything more than 15 minutes is a delay (DoT standard)
        status1.append(0) # on time
    else:
        status1.append(1) # delay
df['FLIGHT_STATUS1'] = status1  

# Five-part classifier
# 0 - less than 15 minutes
# 1 - 15-30 minutes
# 2 - 30-60 minutes
# 3 - 60-90 minutes
# 4 - 90+ minutes
status2 = []
for value in df['ARR_DELAY']:
    if value < 15: # anything more than 15 minutes is a delay (DoT standard)
        status2.append(0) # on time
    elif 15 <= value < 30:
        status2.append(1) # minor delay
    elif 30 <= value < 60:
        status2.append(2) # medium delay
    elif 60 <= value < 90:
        status2.append(3) # large delay
    else:
        status2.append(4) # gross delay
df['FLIGHT_STATUS2'] = status2

#%%
variables_to_remove = ['FL_DATE', 'OP_CARRIER_FL_NUM',
                       'DEP_TIME', 'ARR_TIME',
                       'CANCELLED', 'CANCELLATION_CODE',
                       'DIVERTED',
                       'CARRIER_DELAY', 'WEATHER_DELAY',
                       'NAS_DELAY', 'SECURITY_DELAY',
                       'LATE_AIRCRAFT_DELAY']

df.drop(variables_to_remove, axis = 1, inplace = True)

#%%

df = df.rename(columns={"OP_CARRIER": "CARRIER",
                        "CRS_DEP_TIME" : "SCHEDULED_DEP",
                        "CRS_ARR_TIME" : "SCHEDULED_ARR",
                        "CRS_ELAPSED_TIME" : "SCHEDULED_ELAPSED_TIME"},
          errors="raise")

#%%

# last check of amount and percentage of missing values - should be all 0/100%
# labelled 'missing_df3'

missing_df4 = df.isnull().sum(axis=0).reset_index()
missing_df4.columns = ['variable', 'missing values']
missing_df4['filling factor (%)']=(df.shape[0]-missing_df4['missing values'])/df.shape[0]*100
missing_df4.sort_values('filling factor (%)').reset_index(drop = True)


#%%

# Adjusting data types to reduce memory strain

df = df.astype({
    'DEP_DELAY': int,
    'TAXI_OUT' : int,
    'WHEELS_OFF' : int,
    'WHEELS_ON' : int,
    'TAXI_IN' : int,
    'ARR_DELAY' : int,
    'SCHEDULED_ELAPSED_TIME' : int,
    'ACTUAL_ELAPSED_TIME' : int,
    'AIR_TIME' : int,
    'DISTANCE' : int
            })

#%%

cleaned_dataframe = df

# You'll need to replace this with the appropriate file path on your device
cleaned_dataframe.to_csv('C:/Users/Public/Emma/cleaned_dataframe.csv')
