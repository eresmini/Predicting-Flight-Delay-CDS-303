# -*- coding: utf-8 -*-
"""
Created on Sun Nov 21 20:30:54 2021

@author: rresm
"""
#%%

import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import plotly.express as px
from plotly.offline import plot

#%%

dfa = pd.read_csv('cleaned_dataframe.csv', index_col=0)

# converting most int64 types back to int32 (they revert when reading in the csv)
dfa = dfa.astype({
    'DEP_DELAY': int,
    'TAXI_OUT' : int,
    'WHEELS_OFF' : int,
    'WHEELS_ON' : int,
    'TAXI_IN' : int,
    'ARR_DELAY' : int,
    'SCHEDULED_ELAPSED_TIME' : int,
    'ACTUAL_ELAPSED_TIME' : int,
    'AIR_TIME' : int,
    'DISTANCE' : int
            })

#%%

# make sure we still have no missing values
missing_df1 = dfa.isnull().sum(axis=0).reset_index()
missing_df1.columns = ['variable', 'missing values']
missing_df1['filling factor (%)']=(dfa.shape[0]-missing_df1['missing values'])/dfa.shape[0]*100
missing_df1.sort_values('filling factor (%)').reset_index(drop = True)

#%%

abbr_companies = {'YV' : 'Mesa Airlines',
                  'OH' : 'PSA Airlines',
                  'OO' : 'SkyWest Airlines',
                  'UA' : 'United Airlines',
                  'WN' : 'Southwest Airlines',
                  'F9' : 'Frontier Airlines',
                  'HA' : 'Hawaiian Airlines',
                  'MQ' : 'Envoy Air',
                  '9E' : 'Endeavor Air',
                  'AA' : 'American Airlines',
                  'AS' : 'Alaska Airlines',
                  'B6' : 'JetBlue Airways',
                  'DL' : 'Delta Air Lines',
                  'NK' : 'Spirit Airlines',
                  'G4' : 'Allegiant Air',
                  'YX' : 'Republic Airways'}

#%%
"""
Summary Statistics
"""
def get_stats(group):
    return {'min': group.min(), 'max': group.max(),
            'count': group.count(), 'mean': group.mean()}

## DEPARTURE DELAY STATS
global_stats1 = dfa['DEP_DELAY'].groupby(dfa['CARRIER']).apply(get_stats).unstack()
global_stats1 = global_stats.sort_values('count')

## ARRIVAL DELAY STATS
global_stats2 = dfa['ARR_DELAY'].groupby(dfa['CARRIER']).apply(get_stats).unstack()
global_stats2 = global_stats2.sort_values('count')

# percentages for each classification
delays1 = dfa.FLIGHT_STATUS1.value_counts(normalize=True)
delays2 = dfa.FLIGHT_STATUS2.value_counts(normalize=True)


#%%
"""
Visualizations
"""

# Horizonal Bar Chart - proportion of flights per airline

df_carrier = (dfa.groupby('CARRIER').size()/dfa['CARRIER'].count())*100
df_carrier = df_carrier.rename('percent').reset_index()
df_carrier = df_carrier.sort_values(by=['percent'])

plt.figure(figsize=(20, 10))
axis = plt.barh(width='percent', y='CARRIER', data=df_carrier)
plt.grid(alpha=0.3)

plt.title('Airline Frequency', fontsize=22)
plt.xlabel('Percentage of Flights', fontsize=16)
plt.ylabel('Carrier', fontsize=16)

plt.show()


#%%

# Horizonal Bar Chart - counts of delayed flights per airline

plt.figure(figsize=(20, 10))
dfa.groupby('CARRIER').FLIGHT_STATUS1.sum().sort_values(ascending=True).plot.barh()
plt.title('Delayed Flights by Airline', fontsize=20)
plt.xlabel('Number of Flights', fontsize=16)
plt.ylabel('Airline', fontsize=16)
plt.rc('xtick',labelsize=10)
plt.rc('ytick',labelsize=10)
plt.show()

#%%

## Grouped barchart comparing on-time and delayed flights

plt.figure(figsize=(20, 10))
g = sns.countplot(y=dfa['CARRIER'], order=dfa['CARRIER'].value_counts().iloc[0:18].index, data=dfa, orient="h", hue=dfa['FLIGHT_STATUS1'])
plt.title('On-Time and Delayed Flights by Airline', fontsize=24)
plt.xlabel('Airline', fontsize=18)
plt.ylabel('Count of Flights', fontsize=18)

#%%

## Percentages of carrier depending on flight status 1

dfb = dfa.groupby('CARRIER')['FLIGHT_STATUS1'].value_counts(normalize=True)
dfb = dfb.mul(100)
dfb = dfb.rename('percent').reset_index()


#%%
## Grouped barchart comparing on-time and delayed in percetanges

plt.figure(figsize=(20, 10))
g = sns.catplot(x='percent', y='CARRIER', kind='bar', data=dfb, hue='FLIGHT_STATUS1')
plt.title('Percentage On-Time and Delayed Flights by Airline', fontsize=20)
plt.xlabel('Airline', fontsize=18)
plt.ylabel('Percentage', fontsize=18)

#%%

# Horizonal Bar Chart - Frequency of airport

plt.figure(figsize=(20, 10))
sns.set(font_scale=1.6)
axis = sns.countplot(y=dfa['ORIGIN'], order=dfa['ORIGIN'].value_counts().iloc[0:49].index, data=dfa, color='lightsteelblue')
plt.axvline(100000, color='r')
plt.axvline(200000, color='r')
plt.axvline(300000, color='r')
plt.axvline(400000, color='r')
plt.axvline(500000, color='r')
axis.set_yticklabels(axis.get_yticklabels(), fontsize = 10)
plt.title('Airport Frequency', fontsize=24)
plt.xlabel('Frequency', fontsize=18)
plt.ylabel('Airport', fontsize=18)
plt.tight_layout()
plt.show()


#%%

# Horizonal Bar Chart - average delayed minutes per airline

plt.figure(figsize=(20, 10))
dfa.groupby('CARRIER').ARR_DELAY.mean().sort_values(ascending=True).plot.barh()
plt.title('Average Delay (in minutes) By Airline', fontsize=18)
plt.xlabel('Average Delay (minutes)', fontsize=14)
plt.ylabel('Airline', fontsize=14)
plt.rc('xtick',labelsize=10)
plt.rc('ytick',labelsize=10)
plt.show()


#%%

##### DEPARTURE DELAYS VS. ARRIVAL DELAYS (BAR CHART)

mpl.rcParams.update(mpl.rcParamsDefault)
mpl.rcParams['hatch.linewidth'] = 2.0  

fig = plt.figure(1, figsize=(11,6))
ax = sns.barplot(x="DEP_DELAY", y="CARRIER", data=dfa, color="lightskyblue", ci=None)
ax = sns.barplot(x="ARR_DELAY", y="CARRIER", data=dfa, color="r", hatch = '///',
                 alpha = 0.0, ci=None)
labels = list(abbr_companies.values())
ax.set_yticklabels(labels)
ax.yaxis.label.set_visible(False)
plt.xlabel('Mean delay [min] (@departure: blue, @arrival: hatch lines)',
           fontsize=14, weight = 'bold', labelpad=10);
plt.show()

#%%
##### Grouped barchart comparing on-time and delayed flight status 2

# Function that define how delays are grouped
delay_type = lambda x:((0,1)[x > 15],2)[x > 45]
dfa['DELAY_LEVEL'] = dfa['DEP_DELAY'].apply(delay_type)


fig = plt.figure(1, figsize=(10,7))
ax = sns.countplot(y="CARRIER", hue='DELAY_LEVEL', data=dfa)

ax.set_yticklabels(labels)
plt.setp(ax.get_xticklabels(), fontsize=12, weight = 'normal', rotation = 0);
plt.setp(ax.get_yticklabels(), fontsize=12, weight = 'bold', rotation = 0);
ax.yaxis.label.set_visible(False)
plt.xlabel("flight count", fontsize=16, weight = 'bold', labelpad=10)

# Set the legend
L = plt.legend()
L.get_texts()[0].set_text('on time (t < 15 min)')
L.get_texts()[1].set_text('small delay (15 < t < 45 min)')
L.get_texts()[2].set_text('large delay (t > 45 min)')
plt.show()

#%%

## Percentages of carrier depending on flight status 2

dfc = dfa.groupby('CARRIER')['FLIGHT_STATUS2'].value_counts(normalize=True)
dfc = dfc.mul(100)
dfc = dfc.rename('percent').reset_index()


#%%
## Grouped barchart comparing on-time and delayed in percetanges flight status 2

plt.figure(figsize=(20, 10))
g = sns.catplot(x='percent', y='CARRIER', kind='bar', data=dfc, hue='FLIGHT_STATUS2')
plt.title('Percentage On-Time and Delayed Flights by Airline', fontsize=20)
plt.xlabel('Airline', fontsize=18)
plt.ylabel('Percentage', fontsize=18)

#%%
##### LENGTH OF DELAY FLIGHTS

dfd = dfa.copy()
indexNames2 = dfd[dfd['FLIGHT_STATUS1'] == 0].index
dfd.drop(indexNames2, inplace=True)

#%%
### lenght of delay stats

global_stats3 = dfd['ARR_DELAY'].groupby(dfd['CARRIER']).apply(get_stats).unstack()
global_stats3 = global_stats3.sort_values('count')
global_stats3

#%%

# Horizonal Bar Chart - average length of delay flights in minutes per airline 
plt.figure(figsize=(20, 10))
dfd.groupby('CARRIER').ARR_DELAY.mean().sort_values(ascending=True).plot.barh()
plt.title('Average lenght of delay flights (in minutes) By Airline', fontsize=18)
plt.xlabel('Average lenght of delay (minutes)', fontsize=14)
plt.ylabel('Airline', fontsize=14)
plt.rc('xtick',labelsize=10)
plt.rc('ytick',labelsize=10)
plt.show()

#%%

# ALL numerical attributes
dfa.hist(figsize = [15, 15],bins=9) 
plt.show()

#%%

# ALL categorical attributes

categoricals = ['CARRIER','ORIGIN',
                'Year','Month','Day','WEEKDAY']

fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(16,14), sharey=True)
for col, ax in zip(categoricals, axes.flatten()):
    (dfa.groupby(col).sum()['FLIGHT_STATUS1'].sort_values().plot.bar(ax=ax))
    ax.set_title(col)
fig.tight_layout()
